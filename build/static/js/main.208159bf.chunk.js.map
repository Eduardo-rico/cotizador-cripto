{"version":3,"sources":["cryptomonedas.png","hooks/useMoneda.js","hooks/useCriptomoneda.js","components/Error.js","components/Formulario.js","components/Cotizacion.js","components/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Label","styled","label","Select","select","useMoneda","stateInicial","opciones","useState","state","actualizarState","onChange","e","target","value","map","opcion","key","codigo","nombre","useCriptomoneda","CoinInfo","Id","Name","FullName","MensajeError","p","Error","mensaje","Boton","input","Formulario","guardarMoneda","guardarCriptomoneda","listacripto","guardarCriptomonedas","error","guardarError","moneda","SelectMonedas","criptomoneda","SelectCripto","useEffect","a","axios","get","resultados","data","Data","consultarAPI","onSubmit","preventDefault","type","ResultadoDiv","div","Info","Precio","Cotizacion","resultado","Object","keys","length","console","log","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","className","Contenedor","Imagen","img","Heading","h1","App","guardarResultado","cargando","guardarCargando","url","setTimeout","DISPLAY","cotizarCriptomoneda","componente","src","imagen","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.208159bf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cryptomonedas.96e45d69.png\";","import React, { Fragment, useState } from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst Label = styled.label`\n  font-family: \"Bebas Neue\", cursive;\n  color: #fff;\n  text-transform: uppercase;\n  font-weight: bold;\n  font-size: 2.4rem;\n  margin-top: 2 rem;\n  display: block;\n`;\n\nconst Select = styled.select`\n  width: 100%;\n  display: block;\n  padding: 1rem;\n  -webkit-appearance: none;\n  border-radius: 10px;\n  border: none;\n  font-size: 1.2rem;\n`;\n\nconst useMoneda = (label, stateInicial, opciones) => {\n  //state de nuestro custom hook\n  const [state, actualizarState] = useState(stateInicial);\n\n  //esto se muestra en pantalla Seleccionar\n  const Seleccionar = () => (\n    <Fragment>\n      <Label>{label}</Label>\n      <Select onChange={(e) => actualizarState(e.target.value)} value={state}>\n        <option value=''>- Seleccione su moneda -</option>\n        {opciones.map((opcion) => (\n          <option key={opcion.codigo} value={opcion.codigo}>\n            {opcion.nombre}\n          </option>\n        ))}\n      </Select>\n    </Fragment>\n  );\n\n  //retornar state, interfaz y fn que modifica el state\n  return [state, Seleccionar, actualizarState];\n};\n\nexport default useMoneda;\n","import React, { Fragment, useState } from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst Label = styled.label`\n  font-family: \"Bebas Neue\", cursive;\n  color: #fff;\n  text-transform: uppercase;\n  font-weight: bold;\n  font-size: 2.4rem;\n  margin-top: 2 rem;\n  display: block;\n`;\n\nconst Select = styled.select`\n  width: 100%;\n  display: block;\n  padding: 1rem;\n  -webkit-appearance: none;\n  border-radius: 10px;\n  border: none;\n  font-size: 1.2rem;\n`;\n\nconst useCriptomoneda = (label, stateInicial, opciones) => {\n  //state de nuestro custom hook\n  const [state, actualizarState] = useState(stateInicial);\n\n  //esto se muestra en pantalla Seleccionar\n  const SelectCripto = () => (\n    <Fragment>\n      <Label>{label}</Label>\n      <Select onChange={(e) => actualizarState(e.target.value)} value={state}>\n        <option value=''>- Seleccione su criptomoneda -</option>\n        {opciones.map((opcion) => (\n          <option key={opcion.CoinInfo.Id} value={opcion.CoinInfo.Name}>\n            {opcion.CoinInfo.FullName}\n          </option>\n        ))}\n      </Select>\n    </Fragment>\n  );\n\n  //retornar state, interfaz y fn que modifica el state\n  return [state, SelectCripto, actualizarState];\n};\n\nexport default useCriptomoneda;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst MensajeError = styled.p`\n  background-color: #b7322c;\n  padding: 1rem;\n  color: #fff;\n  font-size: 30px;\n  text-transform: uppercase;\n  font-weight: bold;\n  text-align: center;\n  font-family: \"Bebas Neue\", cursive;\n`;\n\nconst Error = ({ mensaje }) => {\n  return <MensajeError>{mensaje}</MensajeError>;\n};\n\nexport default Error;\n","import React, { useEffect, useState } from \"react\";\nimport styled from \"@emotion/styled\";\n\nimport useMoneda from \"../hooks/useMoneda\";\nimport useCriptomoneda from \"../hooks/useCriptomoneda\";\nimport axios from \"axios\";\nimport Error from \"./Error\";\n\nconst Boton = styled.input`\n  margin-top: 20px;\n  font-weight: bold;\n  font-size: 20px;\n  padding: 10px;\n  background-color: #66a2fe;\n  border: none;\n  width: 100%;\n  border-radius: 10px;\n  color: #fff;\n  transition: background-color 0.3s ease;\n  &:hover {\n    background-color: #326ac0;\n    cursor: pointer;\n  }\n`;\n\nconst Formulario = ({ guardarMoneda, guardarCriptomoneda }) => {\n  //state del listado de criptomonedas\n  const [listacripto, guardarCriptomonedas] = useState([]);\n  const [error, guardarError] = useState(false);\n\n  const MONEDAS = [\n    { codigo: \"USD\", nombre: \"Dolar de Estados Unidos\" },\n    { codigo: \"MXN\", nombre: \"Peso mexicano\" },\n    { codigo: \"EUR\", nombre: \"Euro\" },\n    { codigo: \"GBP\", nombre: \"Libra esterlina\" }\n  ];\n\n  //usar useMoneda\n  const [moneda, SelectMonedas] = useMoneda(\"Elige tu moneda\", \"\", MONEDAS);\n\n  //usar useCriptomoneda\n\n  const [criptomoneda, SelectCripto] = useCriptomoneda(\n    \"Elige tu criptomoneda\",\n    \"\",\n    listacripto\n  );\n\n  //ejecutar llamado a la api\n  useEffect(() => {\n    const consultarAPI = async () => {\n      const url = `https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD`;\n      const resultados = await axios.get(url);\n      // console.log(resultados.data.Data);\n\n      guardarCriptomonedas(resultados.data.Data);\n    };\n\n    consultarAPI();\n  }, []);\n\n  //cuando el usuario hace submit\n  const cotizarMoneda = (e) => {\n    e.preventDefault();\n    //validar campos llenos\n    if (moneda === \"\" || criptomoneda === \"\") {\n      guardarError(true);\n      return;\n    }\n    //pasar datos al componente principal app\n    guardarError(false);\n    guardarMoneda(moneda);\n    guardarCriptomoneda(criptomoneda);\n  };\n\n  return (\n    <form onSubmit={cotizarMoneda}>\n      {error ? <Error mensaje='Todos los campos son obligatorios' /> : null}\n      <SelectMonedas />\n      <SelectCripto />\n      <Boton type='submit' value='Calcular' />\n    </form>\n  );\n};\n\nexport default Formulario;\n","import React from \"react\";\nimport styled from \"@emotion/styled\";\n\nconst ResultadoDiv = styled.div`\n  color: #fff;\n  font-family: Arial, Helvetica, sans-serif;\n`;\nconst Info = styled.p`\n  font-size: 18px;\n\n  span {\n    font-weight: bold;\n  }\n`;\n\nconst Precio = styled.p`\n  font-size: 30px;\n  span {\n    font-weight: bold;\n  }\n`;\n\nconst Cotizacion = ({ resultado }) => {\n  if (Object.keys(resultado).length === 0) return null;\n  console.log(resultado);\n\n  return (\n    <ResultadoDiv>\n      <Precio>\n        El precio es <span>{resultado.PRICE}</span>\n      </Precio>\n      <Info>\n        El precio mas alto del dia es es <span>{resultado.HIGHDAY}</span>\n      </Info>\n      <Info>\n        El precio mas bajo del dia es <span>{resultado.LOWDAY}</span>\n      </Info>\n      <Info>\n        Variación ultimas 24 horas <span>{resultado.CHANGEPCT24HOUR}</span>\n      </Info>\n      <Info>\n        Ultima actualizacion <span>{resultado.LASTUPDATE}</span>\n      </Info>\n    </ResultadoDiv>\n  );\n};\n\nexport default Cotizacion;\n","import React from \"react\";\nimport \"./Spinner.css\";\nconst Spinner = () => {\n  return (\n    <div className='spinner'>\n      <div className='rect1'></div>\n      <div className='rect2'></div>\n      <div className='rect3'></div>\n      <div className='rect4'></div>\n      <div className='rect5'></div>\n    </div>\n  );\n};\n\nexport default Spinner;\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"@emotion/styled\";\n\nimport imagen from \"./cryptomonedas.png\";\nimport Formulario from \"./components/Formulario\";\nimport axios from \"axios\";\nimport Cotizacion from \"./components/Cotizacion\";\nimport Spinner from \"./components/Spinner\";\n\nconst Contenedor = styled.div`\n  max-width: 900px;\n  margin: 0 auto;\n  @media (min-width: 992px) {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n    column-gap: 2rem;\n  }\n`;\n\nconst Imagen = styled.img`\n  max-width: 100%;\n  margin-top: 5rem;\n`;\n\nconst Heading = styled.h1`\n  font-family: \"Bebas Neue\", cursive;\n  color: #fff;\n  text-align: left;\n  font-weight: 700;\n  font-size: 50px;\n  margin-bottom: 50px;\n  margin-top: 80px;\n\n  &::after {\n    content: \"\";\n    width: 100px;\n    height: 6px;\n    background-color: #66a2fe;\n    display: block;\n  }\n`;\n\nfunction App() {\n  const [moneda, guardarMoneda] = useState(\"\");\n  const [criptomoneda, guardarCriptomoneda] = useState(\"\");\n  const [resultado, guardarResultado] = useState({});\n  const [cargando, guardarCargando] = useState(false);\n\n  useEffect(() => {\n    const cotizarCriptomoneda = async () => {\n      //evitamos la ejecucion la primera vez\n      if (moneda === \"\") return;\n      console.log(\"cotizando\");\n\n      const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${criptomoneda}&tsyms=${moneda}`;\n\n      const resultado = await axios.get(url);\n\n      //mostrar spiner\n      guardarCargando(true);\n\n      //ocultar el spiner y mostrar el resultado\n      setTimeout(() => {\n        //cambiar el estado de cargando\n        guardarCargando(false);\n\n        //esto estaba afuera\n        guardarResultado(resultado.data.DISPLAY[criptomoneda][moneda]);\n      }, 1500);\n    };\n    cotizarCriptomoneda();\n  }, [moneda, criptomoneda]);\n\n  //mostrar espiner o resultado\n\n  const componente = cargando ? (\n    <Spinner />\n  ) : (\n    <Cotizacion resultado={resultado} />\n  );\n\n  return (\n    <Contenedor>\n      <div>\n        <Imagen src={imagen} alt='imagen cripto' />\n      </div>\n      <div>\n        <Heading>Cotizador de criptomonedas</Heading>\n        <Formulario\n          guardarMoneda={guardarMoneda}\n          guardarCriptomoneda={guardarCriptomoneda}\n        />\n        {componente}\n      </div>\n    </Contenedor>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}